@page
@model RazorFrontendApp.Pages.Friends.Friend.AddressModel
@using System.Text
@{
    ViewData["title"] = $"Assign address to {(Model.Friend is not null ? $"{Model.Friend.FirstName} {Model.Friend.LastName}" : "(ERROR)")}";
}
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@attribute [IgnoreAntiforgeryToken]

<section id="address">
    <div class="fs-4 border-bottom">Friends > Friend</div>
    <h1 class="display-5 fw-normal">@ViewData["title"]</h1>

    @if (Model.UpdateMessages.Any())
    {
        <div class="d-flex flex-column justify-content-between alert alert-success" role="alert">
            <div class="d-flex flex-row justify-content-between">
                <h2 class="alert-heading">Updates:</h2>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            @foreach (string msg in Model.UpdateMessages)
            {
                <div class="mx-3 d-flex flex-row justify-content-between alert alert-light" role="alert">
                    <div class="d-flex flex-row justify-content-start gap-2">
                        <svg width="24" height="24"><use xlink:href="#svg-check" href="#svg-check"></use></svg>
                        @msg
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
        </div>
    }

    @if (Model.ErrorMessages.Any())
    {
        <div class="d-flex flex-column justify-content-between alert alert-danger" role="alert">
            <div class="d-flex flex-row justify-content-between">
                <h2 class="alert-heading">Errors:</h2>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            @foreach (string msg in Model.ErrorMessages)
            {
                <div class="mx-3 d-flex flex-row justify-content-between alert alert-dark" role="alert">
                    <div class="d-flex flex-row justify-content-start gap-2">
                        <svg width="24" height="24"><use xlink:href="#svg-alert" href="#svg-alert"></use></svg>
                        @msg
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
        </div>
    }

    <div class="d-flex flex-column align-items-end mt-3">
        @{
            FriendCounter();
        }
    </div>

    <div class="d-flex flex-row justify-content-between align-items-start gap-2 mb-3">
        <form action="" method="get" class="d-flex flex-row flex-grow-1 gap-2">
            @foreach (var part in Model.Request.Query)
            {
                if (part.Value == "" || part.Key == "filter" || part.Key == "pageSize")
                    continue;

                <input type="hidden" name="@part.Key" value="@part.Value" />
            }
            <div class="list-bar" data-tooltip="Filter the results by first or last name. Press enter to submit.">
                <input type="text" placeholder="Name filter" name="filter" value="@Model.Filter" />
            </div>

            <div class="list-bar flex-grow-0" data-tooltip="The number of friends per page.">
                <select name="pageSize" asp-items="Model.PageSizes" onchange="this.form.submit();"></select>
            </div>
        </form>

        @{
            Pagination();
        }
    </div>

    <form method="post">
        <input type="hidden" asp-for="FriendId" />

        <div class="address-selection">
            @if (Model.Address is not null && Model.Address.AddressId != Guid.Empty)
            {
                <div class="mb-2">
                    <strong>Current address:</strong>
                    <div>
                        <label class="rounded-3">
                            <input type="radio" required asp-for="SelectedAddressId" class="d-none"
                                   id="address-@Model.SelectedAddressId" value="@Model.SelectedAddressId" checked />
                            @Model.Address.StreetAddress, @Model.Address.ZipCode @Model.Address.City, @Model.Address.Country
                        </label>
                    </div>
                </div>
            }

            @for (int i = 0; i < Model.Addresses.Count; i++)
            {
                <div>
                    <label class="@(i == 0 ? " rounded-top border-bottom" :
                        (i == Model.Addresses.Count-1 ? " rounded-bottom" : " border-bottom"))">
                        <input type="radio" required asp-for="SelectedAddressId" class="d-none" 
                            id="address-@Model.Addresses[i].AddressId" value="@Model.Addresses[i].AddressId" />
                        @Model.Addresses[i].StreetAddress, @Model.Addresses[i].ZipCode @Model.Addresses[i].City, @Model.Addresses[i].Country
                    </label>
                </div>
            }
        </div>

        <div class="d-flex flex-column align-items-end mt-3">
            @{
                Pagination();
                FriendCounter();
            }
        </div>

        <button type="submit" class="w-100 btn btn-primary">Save</button>
    </form>
</section>


@functions {
    void Pagination()
    {
        <nav aria-label="Friend list pagination">
            @{
                int currentPage = Model.CurrentPage;
                int totalPages = Model.TotalPages;

                int listedPages = Math.Min(Model.DisplayedPages, totalPages);
                int backPages = (int)Math.Floor((listedPages - 1) * 0.5m);

                int firstPage = Math.Max(1, currentPage - backPages);
                int lastPage = Math.Min(totalPages, firstPage + (listedPages - 1));

                if (listedPages > 1)
                    firstPage = Math.Min(firstPage, lastPage - (listedPages - 1));
            }

            <ul class="pagination m-0">
                @{
                    StringBuilder uri = new($"{Model.Request.Path}?");

                    foreach (var part in Model.Request.Query)
                    {
                        if (part.Value == "" || part.Key == "page")
                            continue;

                        uri.Append(part.Key)
                        .Append('=')
                        .Append(part.Value)
                        .Append('&');
                    }
                    uri.Append("page=");
                }

                <li class="@("page-item" + (currentPage <= 1 ? " disabled" : null))">
                    @if (currentPage > 1)
                    {
                        <a class="page-link" href="@(uri.ToString() + (currentPage-1))">Previous</a>
                    }
                    else
                    {
                        <a class="page-link">Previous</a>
                    }
                </li>

                @for (int i = firstPage; i <= lastPage; i++)
                {
                    <li class="@("page-item" + (i == currentPage ? " active" : null))">
                        <a class="page-link" href="@(uri.ToString() + i)">@i</a>
                    </li>
                }

                <li class="@("page-item" + (currentPage >= totalPages ? " disabled" : null))">
                    @if (currentPage < totalPages)
                    {
                        <a class="page-link" href="@(uri.ToString() + (currentPage+1))">Next</a>
                    }
                    else
                    {
                        <a class="page-link">Next</a>
                    }
                </li>
            </ul>
        </nav>
    }

    void FriendCounter()
    {
        <div class="fs-6 me-2">
            Showing friends
            @(int.Min(((Model.CurrentPage - 1) * Model.PageSize + 1), Model.TotalAddresses)
                )-@int.Min(Model.CurrentPage * Model.PageSize, Model.TotalAddresses)
            of
            @Model.TotalAddresses
        </div>
    }
}